- name: "创建ssl证书目录"
  file:
    path: "{{ ssl_dir }}"
    state: directory

- stat:
    path: "{{ ssl_dir }}/etcd-ca.key"
  register: etcd_ca_key
- name: "Generate Etcd CA private key"
  when: not etcd_ca_key.stat.exists
  openssl_privatekey:
    path: "{{ ssl_dir }}/etcd-ca.key"
    type: RSA
    size: 4096
- stat:
    path: "{{ ssl_dir }}/etcd-ca.csr"
  register: etcd_ca_csr
- name: "Generate Etcd CA request"
  when: not etcd_ca_csr.stat.exists
  openssl_csr:
    path: "{{ ssl_dir }}/etcd-ca.csr"
    privatekey_path: "{{ ssl_dir }}/etcd-ca.key"
    use_common_name_for_san: no
    country_name: CN
    state_or_province_name: Shanghai
    locality_name: Shanghai
    organization_name: k8sre
    common_name: etcd-ca
    basic_constraints_critical: yes
    basic_constraints:
      - CA:TRUE
    key_usage_critical: yes
    key_usage:
      - digitalSignature
      - keyCertSign
      - keyEncipherment
- stat:
    path: "{{ ssl_dir }}/etcd-ca.pem"
  register: etcd_ca_pem
- name: "Generate Etcd CA certificate"
  when: not etcd_ca_pem.stat.exists
  openssl_certificate:
    path: "{{ ssl_dir }}/etcd-ca.pem"
    provider: selfsigned
    privatekey_path: "{{ ssl_dir }}/etcd-ca.key"
    csr_path: "{{ ssl_dir }}/etcd-ca.csr"

- stat:
    path: "{{ ssl_dir }}/etcd-server.key"
  register: etcd_server_key
- name: "Generate Etcd Server private key"
  when: not etcd_server_key.stat.exists
  openssl_privatekey:
    path: "{{ ssl_dir }}/etcd-server.key"
    type: RSA
    size: 4096
- stat:
    path: "{{ ssl_dir }}/etcd-server.csr"
  register: etcd_server_csr 
- name: "Generate Etcd Server request"
  when: not etcd_server_csr.stat.exists
  openssl_csr:
    path: "{{ ssl_dir }}/etcd-server.csr"
    privatekey_path: "{{ ssl_dir }}/etcd-server.key"
    country_name: CN
    state_or_province_name: Shanghai
    locality_name: Shanghai
    organization_name: k8sre
    common_name: etcd-server
    key_usage_critical: yes
    key_usage:
      - digitalSignature
      - keyEncipherment
    extended_key_usage:
      - clientAuth
      - serverAuth
    subject_alt_name: "{{ item | map('regex_replace', '^', 'IP:') | list }}"
  with_list:
    - "{{ groups['etcd'] }}"
- stat:
    path: "{{ ssl_dir }}/etcd-server.pem"
  register: etcd_server_pem 
- name: "Generate Etcd Server certificate"
  when: not etcd_server_pem.stat.exists
  openssl_certificate:
    path: "{{ ssl_dir }}/etcd-server.pem"
    provider: ownca
    privatekey_path: "{{ ssl_dir }}/etcd-server.key"
    csr_path: "{{ ssl_dir }}/etcd-server.csr"
    ownca_path: "{{ ssl_dir }}/etcd-ca.pem"
    ownca_privatekey_path: "{{ ssl_dir }}/etcd-ca.key"

- stat:
    path: "{{ ssl_dir }}/etcd-client.key"
  register: etcd_client_key 
- name: "Generate Etcd Client private key"
  when: not etcd_client_key.stat.exists
  openssl_privatekey:
    path: "{{ ssl_dir }}/etcd-client.key"
    type: RSA
    size: 4096
- stat:
    path: "{{ ssl_dir }}/etcd-client.csr"
  register: etcd_client_csr 
- name: "Generate Etcd Client request"
  when: not etcd_client_csr.stat.exists
  openssl_csr:
    path: "{{ ssl_dir }}/etcd-client.csr"
    privatekey_path: "{{ ssl_dir }}/etcd-client.key"
    use_common_name_for_san: no
    country_name: CN
    state_or_province_name: Shanghai
    locality_name: Shanghai
    organization_name: system:masters
    common_name: etcd-client
    key_usage_critical: yes
    key_usage:
      - digitalSignature
      - keyEncipherment
    extended_key_usage:
      - clientAuth
- stat:
    path: "{{ ssl_dir }}/etcd-client.pem"
  register: etcd_client_pem 
- name: "Generate Etcd Client certificate"
  when: not etcd_client_pem.stat.exists
  openssl_certificate:
    path: "{{ ssl_dir }}/etcd-client.pem"
    provider: ownca
    privatekey_path: "{{ ssl_dir }}/etcd-client.key"
    csr_path: "{{ ssl_dir }}/etcd-client.csr"
    ownca_path: "{{ ssl_dir }}/etcd-ca.pem"
    ownca_privatekey_path: "{{ ssl_dir }}/etcd-ca.key"

- stat:
    path: "{{ ssl_dir }}/etcd-peer.key"
  register: etcd_peer_key 
- name: "Generate Etcd Peer private key"
  when: not etcd_peer_key.stat.exists
  openssl_privatekey:
    path: "{{ ssl_dir }}/etcd-peer.key"
    type: RSA
    size: 4096
- stat:
    path: "{{ ssl_dir }}/etcd-peer.csr"
  register: etcd_peer_csr 
- name: "Generate Etcd Peer request"
  when: not etcd_peer_csr.stat.exists
  openssl_csr:
    path: "{{ ssl_dir }}/etcd-peer.csr"
    privatekey_path: "{{ ssl_dir }}/etcd-peer.key"
    country_name: CN
    state_or_province_name: Shanghai
    locality_name: Shanghai
    organization_name: k8sre
    common_name: etcd-peer
    key_usage_critical: yes
    key_usage:
      - digitalSignature
      - keyEncipherment
    extended_key_usage:
      - clientAuth
      - serverAuth
    subject_alt_name: "{{ item | map('regex_replace', '^', 'IP:') | list }}"
  with_list:
    - "{{ groups['etcd'] }}"
- stat:
    path: "{{ ssl_dir }}/etcd-peer.pem"
  register: etcd_peer_pem 
- name: "Generate Etcd Peer certificate"
  when: not etcd_peer_pem.stat.exists
  openssl_certificate:
    path: "{{ ssl_dir }}/etcd-peer.pem"
    provider: ownca
    privatekey_path: "{{ ssl_dir }}/etcd-peer.key"
    csr_path: "{{ ssl_dir }}/etcd-peer.csr"
    ownca_path: "{{ ssl_dir }}/etcd-ca.pem"
    ownca_privatekey_path: "{{ ssl_dir }}/etcd-ca.key"

- stat:
    path: "{{ ssl_dir }}/ca.key"
  register: ca_key 
- name: "Generate CA private key"
  when: not ca_key.stat.exists
  openssl_privatekey:
    path: "{{ ssl_dir }}/ca.key"
    type: RSA
    size: 4096
- stat:
    path: "{{ ssl_dir }}/ca.csr"
  register: ca_csr 
- name: "Generate CA request"
  when: not ca_csr.stat.exists
  openssl_csr:
    path: "{{ ssl_dir }}/ca.csr"
    privatekey_path: "{{ ssl_dir }}/ca.key"
    use_common_name_for_san: no
    country_name: CN
    state_or_province_name: Shanghai
    locality_name: Shanghai
    organization_name: k8sre
    common_name: kubernetes
    basic_constraints_critical: yes
    basic_constraints:
      - CA:TRUE
    key_usage_critical: yes
    key_usage:
      - cRLSign
      - keyCertSign
      - digitalSignature
      - keyEncipherment
- stat:
    path: "{{ ssl_dir }}/ca.pem"
  register: ca_pem 
- name: "Generate CA certificate"
  when: not ca_pem.stat.exists
  openssl_certificate:
    path: "{{ ssl_dir }}/ca.pem"
    provider: selfsigned
    privatekey_path: "{{ ssl_dir }}/ca.key"
    csr_path: "{{ ssl_dir }}/ca.csr"

- stat:
    path: "{{ ssl_dir }}/admin.key"
  register: admin_key 
- name: "Generate kubectl private key"
  when: not admin_key.stat.exists
  openssl_privatekey:
    path: "{{ ssl_dir }}/admin.key"
    type: RSA
    size: 4096
- stat:
    path: "{{ ssl_dir }}/admin.csr"
  register: admin_csr
- name: "Generate kubectl request"
  when: not admin_csr.stat.exists
  openssl_csr:
    path: "{{ ssl_dir }}/admin.csr"
    privatekey_path: "{{ ssl_dir }}/admin.key"
    use_common_name_for_san: no
    country_name: CN
    state_or_province_name: Shanghai
    locality_name: Shanghai
    organization_name: system:masters
    common_name: admin
    key_usage_critical: yes
    key_usage:
      - digitalSignature
      - keyEncipherment
    extended_key_usage:
      - clientAuth
- stat:
    path: "{{ ssl_dir }}/admin.pem"
  register: admin_pem
- name: "Generate kubectl certificate"
  when: not admin_pem.stat.exists
  openssl_certificate:
    path: "{{ ssl_dir }}/admin.pem"
    provider: ownca
    privatekey_path: "{{ ssl_dir }}/admin.key"
    csr_path: "{{ ssl_dir }}/admin.csr"
    ownca_path: "{{ ssl_dir }}/ca.pem"
    ownca_privatekey_path: "{{ ssl_dir }}/ca.key"

- include_vars: apiserver.yml
  when: apiserver_domain_name is defined and apiserver_domain_name | ipaddr == false
- include_vars: kube.yml
  when: apiserver_domain_name is defined and apiserver_domain_name | ipaddr != false
- name: "merge lists"
  set_fact:
    lists_merged: "{{ groups['master'] | union(k8s_ip) | map('regex_replace', '^', 'IP:') | list }} + {{ k8s_domain | map('regex_replace', '^', 'DNS:') | list}}"
- stat:
    path: "{{ ssl_dir }}/kube-apiserver.key"
  register: kube_apiserver_key
- name: "Generate kube-apiserver private key"
  when: not kube_apiserver_key.stat.exists
  openssl_privatekey:
    path: "{{ ssl_dir }}/kube-apiserver.key"
    type: RSA
    size: 4096
- stat:
    path: "{{ ssl_dir }}/kube-apiserver.csr"
  register: kube_apiserver_csr
- name: "Generate kube-apiserver request"
  when: not kube_apiserver_csr.stat.exists
  openssl_csr:
    path: "{{ ssl_dir }}/kube-apiserver.csr"
    privatekey_path: "{{ ssl_dir }}/kube-apiserver.key"
    country_name: CN
    state_or_province_name: Shanghai
    locality_name: Shanghai
    organization_name: k8sre
    common_name: kube-apiserver
    key_usage_critical: yes
    key_usage:
      - digitalSignature
      - keyEncipherment
    extended_key_usage:
      - serverAuth
    subject_alt_name: "{{ lists_merged }}"
- stat:
    path: "{{ ssl_dir }}/kube-apiserver.pem"
  register: kube_apiserver_pem
- name: "Generate kube-apiserver certificate"
  when: not kube_apiserver_pem.stat.exists
  openssl_certificate:
    path: "{{ ssl_dir }}/kube-apiserver.pem"
    provider: ownca
    privatekey_path: "{{ ssl_dir }}/kube-apiserver.key"
    csr_path: "{{ ssl_dir }}/kube-apiserver.csr"
    ownca_path: "{{ ssl_dir }}/ca.pem"
    ownca_privatekey_path: "{{ ssl_dir }}/ca.key"

- stat:
    path: "{{ ssl_dir }}/kube-apiserver-kubelet-client.key"
  register: kube_apiserver_kubelet_client_key
- name: "Generate kube-apiserver-kubelet-client private key"
  when: not kube_apiserver_kubelet_client_key.stat.exists
  openssl_privatekey:
    path: "{{ ssl_dir }}/kube-apiserver-kubelet-client.key"
    type: RSA
    size: 4096
- stat:
    path: "{{ ssl_dir }}/kube-apiserver-kubelet-client.csr"
  register: kube_apiserver_kubelet_client_csr
- name: "Generate kube-apiserver-kubelet-client request"
  when: not kube_apiserver_kubelet_client_csr.stat.exists
  openssl_csr:
    path: "{{ ssl_dir }}/kube-apiserver-kubelet-client.csr"
    privatekey_path: "{{ ssl_dir }}/kube-apiserver-kubelet-client.key"
    use_common_name_for_san: no
    country_name: CN
    state_or_province_name: Shanghai
    locality_name: Shanghai
    organization_name: system:masters
    common_name: kube-apiserver-kubelet-client
    key_usage_critical: yes
    key_usage:
      - digitalSignature
      - keyEncipherment
    extended_key_usage:
      - clientAuth
- stat:
    path: "{{ ssl_dir }}/kube-apiserver-kubelet-client.pem"
  register: kube_apiserver_kubelet_client_pem
- name: "Generate kube-apiserver-kubelet-client certificate"
  when: not kube_apiserver_kubelet_client_pem.stat.exists
  openssl_certificate:
    path: "{{ ssl_dir }}/kube-apiserver-kubelet-client.pem"
    provider: ownca
    privatekey_path: "{{ ssl_dir }}/kube-apiserver-kubelet-client.key"
    csr_path: "{{ ssl_dir }}/kube-apiserver-kubelet-client.csr"
    ownca_path: "{{ ssl_dir }}/ca.pem"
    ownca_privatekey_path: "{{ ssl_dir }}/ca.key"

- stat:
    path: "{{ ssl_dir }}/proxy-client.key"
  register: proxy_client_key
- name: "Generate proxy-client private key"
  when: not proxy_client_key.stat.exists
  openssl_privatekey:
    path: "{{ ssl_dir }}/proxy-client.key"
    type: RSA
    size: 4096
- stat:
    path: "{{ ssl_dir }}/proxy-client.csr"
  register: proxy_client_csr
- name: "Generate proxy-client request"
  when: not proxy_client_csr.stat.exists
  openssl_csr:
    path: "{{ ssl_dir }}/proxy-client.csr"
    privatekey_path: "{{ ssl_dir }}/proxy-client.key"
    use_common_name_for_san: no
    country_name: CN
    state_or_province_name: Shanghai
    locality_name: Shanghai
    organization_name: k8sre
    common_name: aggregator
    key_usage_critical: yes
    key_usage:
      - digitalSignature
      - keyEncipherment
    extended_key_usage:
      - clientAuth
- stat:
    path: "{{ ssl_dir }}/proxy-client.pem"
  register: proxy_client_pem
- name: "Generate proxy-client certificate"
  when: not proxy_client_pem.stat.exists
  openssl_certificate:
    path: "{{ ssl_dir }}/proxy-client.pem"
    provider: ownca
    privatekey_path: "{{ ssl_dir }}/proxy-client.key"
    csr_path: "{{ ssl_dir }}/proxy-client.csr"
    ownca_path: "{{ ssl_dir }}/ca.pem"
    ownca_privatekey_path: "{{ ssl_dir }}/ca.key"

- stat:
    path: "{{ ssl_dir }}/kube-controller-manager.key"
  register: kube_controller_manager_key
- name: "Generate kube-controller-manager private key"
  when: not kube_controller_manager_key.stat.exists
  openssl_privatekey:
    path: "{{ ssl_dir }}/kube-controller-manager.key"
    type: RSA
    size: 4096
- stat:
    path: "{{ ssl_dir }}/kube-controller-manager.csr"
  register: kube_controller_manager_csr
- name: "Generate kube-controller-manager request"
  when: not kube_controller_manager_csr.stat.exists
  openssl_csr:
    path: "{{ ssl_dir }}/kube-controller-manager.csr"
    privatekey_path: "{{ ssl_dir }}/kube-controller-manager.key"
    use_common_name_for_san: no
    country_name: CN
    state_or_province_name: Shanghai
    locality_name: Shanghai
    organization_name: system:kube-controller-manager
    common_name: system:kube-controller-manager
    key_usage_critical: yes
    key_usage:
      - digitalSignature
      - keyEncipherment
    extended_key_usage:
      - clientAuth
- stat:
    path: "{{ ssl_dir }}/kube-controller-manager.pem"
  register: kube_controller_manager_pem
- name: "Generate kube-controller-manager certificate"
  when: not kube_controller_manager_pem.stat.exists
  openssl_certificate:
    path: "{{ ssl_dir }}/kube-controller-manager.pem"
    provider: ownca
    privatekey_path: "{{ ssl_dir }}/kube-controller-manager.key"
    csr_path: "{{ ssl_dir }}/kube-controller-manager.csr"
    ownca_path: "{{ ssl_dir }}/ca.pem"
    ownca_privatekey_path: "{{ ssl_dir }}/ca.key"

- stat:
    path: "{{ ssl_dir }}/kube-scheduler.key"
  register: kube_scheduler_key
- name: "Generate kube-scheduler private key"
  when: not kube_scheduler_key.stat.exists
  openssl_privatekey:
    path: "{{ ssl_dir }}/kube-scheduler.key"
    type: RSA
    size: 4096
- stat:
    path: "{{ ssl_dir }}/kube-scheduler.csr"
  register: kube_scheduler_csr
- name: "Generate kube-scheduler request"
  when: not kube_scheduler_csr.stat.exists
  openssl_csr:
    path: "{{ ssl_dir }}/kube-scheduler.csr"
    privatekey_path: "{{ ssl_dir }}/kube-scheduler.key"
    use_common_name_for_san: no
    country_name: CN
    state_or_province_name: Shanghai
    locality_name: Shanghai
    organization_name: system:kube-scheduler
    common_name: system:kube-scheduler
    key_usage_critical: yes
    key_usage:
      - digitalSignature
      - keyEncipherment
    extended_key_usage:
      - clientAuth
- stat:
    path: "{{ ssl_dir }}/kube-scheduler.pem"
  register: kube_scheduler_pem
- name: "Generate kube-scheduler certificate"
  when: not kube_scheduler_pem.stat.exists
  openssl_certificate:
    path: "{{ ssl_dir }}/kube-scheduler.pem"
    provider: ownca
    privatekey_path: "{{ ssl_dir }}/kube-scheduler.key"
    csr_path: "{{ ssl_dir }}/kube-scheduler.csr"
    ownca_path: "{{ ssl_dir }}/ca.pem"
    ownca_privatekey_path: "{{ ssl_dir }}/ca.key"

- stat:
    path: "{{ ssl_dir }}/kube-proxy.key"
  register: kube_proxy_key
- name: "Generate kube-proxy private key"
  when: not kube_proxy_key.stat.exists
  openssl_privatekey:
    path: "{{ ssl_dir }}/kube-proxy.key"
    type: RSA
    size: 4096
- stat:
    path: "{{ ssl_dir }}/kube-proxy.csr"
  register: kube_proxy_csr
- name: "Generate kube-proxy request"
  when: not kube_proxy_csr.stat.exists
  openssl_csr:
    path: "{{ ssl_dir }}/kube-proxy.csr"
    privatekey_path: "{{ ssl_dir }}/kube-proxy.key"
    use_common_name_for_san: no
    country_name: CN
    state_or_province_name: Shanghai
    locality_name: Shanghai
    organization_name: k8sre
    common_name: system:kube-proxy
    key_usage_critical: yes
    key_usage:
      - digitalSignature
      - keyEncipherment
    extended_key_usage:
      - clientAuth
- stat:
    path: "{{ ssl_dir }}/kube-proxy.pem"
  register: kube_proxy_pem
- name: "Generate kube-proxy certificate"
  when: not kube_proxy_pem.stat.exists
  openssl_certificate:
    path: "{{ ssl_dir }}/kube-proxy.pem"
    provider: ownca
    privatekey_path: "{{ ssl_dir }}/kube-proxy.key"
    csr_path: "{{ ssl_dir }}/kube-proxy.csr"
    ownca_path: "{{ ssl_dir }}/ca.pem"
    ownca_privatekey_path: "{{ ssl_dir }}/ca.key"

- stat:
    path: "{{ ssl_dir }}/token"
  register: token
- name: "生成bootstrap-token-id"
  when: not token.stat.exists
  shell: openssl rand -hex 3
  register: token_id
- name: "生成bootstrap-token-secret"
  when: not token.stat.exists
  shell: openssl rand -hex 8
  register: token_secret
- name: "创建bootstrap-token文件"
  when: not token.stat.exists
  blockinfile:
    path: "{{ ssl_dir }}/token"
    block: "{{ token_id.stdout }}.{{ token_secret.stdout }}"
    create: true

