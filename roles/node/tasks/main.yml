- name: "Install dependencies"
  yum:
    name: "{{ item.line }}"
    state: installed
  with_items:
    - {line: 'libnetfilter_conntrack-devel'}
    - {line: 'libnetfilter_conntrack'}
    - {line: 'conntrack-tools'}
    - {line: 'conntrack'}
    - {line: 'socat'}
    - {line: 'ipvsadm'}
  tags: node_app
- name: "mkdir kubernetes directory"
  file:
    path: "{{ item.line }}"
    state: directory
    mode: '0755'
  with_items:
    - {line: '/etc/kubernetes/pki'}
    - {line: '/etc/kubernetes/manifests'}
    - {line: '/var/lib/kubelet'}
    - {line: "/usr/lib/systemd/system/kubelet.service.d/"}
  tags: dir
- name: "install node"
  copy:
    src: "{{ item.line }}"
    dest: /usr/bin/
    owner: root
    group: root
    mode: '0775'
  with_items:
    - { line: "{{ kubernetes_version }}/kubelet"}
    - { line: "{{ kubernetes_version }}/kube-proxy"}
  tags: kube_node
- name: "distribute node cert file"
  copy:
    src: "{{ item.line }}"
    dest: "/etc/kubernetes/pki/"
  with_items:
    - {line: "{{ ssl_dir }}/ca.pem"}
    - {line: "{{ ssl_dir }}/ca.key"}
    - {line: "{{ ssl_dir }}/kube-proxy.pem"}
    - {line: "{{ ssl_dir }}/kube-proxy.key"}
    - {line: "{{ ssl_dir }}/token"}
  tags: dis_certs
- name: "read bootstrap-token-id"
  shell: cat /etc/kubernetes/pki/token | grep -v "^#" | awk -F '.' '{print $1}'
  register: token_id
  tags: dis_node_config
- name: "read bootstrap-token-secret"
  shell: cat /etc/kubernetes/pki/token | grep -v "^#" | awk -F '.' '{print $2}'
  register: token_secret
  tags: dis_node_config
- name: "create kubelet configure file"
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - {src: "bootstrap.kubeconfig.j2",dest: "/etc/kubernetes/bootstrap.kubeconfig" }
    - {src: "kube-proxy.kubeconfig.j2",dest: "/etc/kubernetes/kube-proxy.kubeconfig" }
    - {src: "kubelet.service.j2",dest: "/usr/lib/systemd/system/kubelet.service" }
    - {src: "kube-proxy.service.j2",dest: "/usr/lib/systemd/system/kube-proxy.service" }
    - {src: "kubelet.conf.j2",dest: "/etc/kubernetes/kubelet.conf" }
    - {src: "10-kubelet.conf.j2",dest: "/etc/sysconfig/kubelet" }
    - {src: "kube-proxy.conf.j2",dest: "/etc/kubernetes/kube-proxy.conf" }
  tags: dis_node_config
- name: "remove bootstrap-token file"
  file:
    path: "/etc/kubernetes/pki/token"
    state: absent
- name: "restart kubelet"
  systemd:
    name: kubelet
    state: restarted
    daemon_reload: yes
    enabled: yes
  tags: restart_kubelet
- name: "waiting kubelet start success"
  wait_for:
    host: "{{ ansible_default_ipv4.address }}"
    port: 10250
    delay: 5
    sleep: 2
  vars: 
    ansible_connection: local
  tags: healthcheck
- name: "get Pending csr"
  shell: kubectl get csr| grep Pending | awk '{print $1}'|tr '\n' ' '
  delegate_to: "{{ groups['master'][0] }}"
  run_once: true
  register: approve_csr
  tags: approve_node
- name: "approve csr"
  shell: kubectl certificate approve {{ approve_csr.stdout }}
  delegate_to: "{{ groups['master'][0] }}"
  run_once: true
  tags: approve_node
- name: "kubelet check "
  uri:
    url: "https://{{ ansible_default_ipv4.address }}:10250/healthz"
    return_content: yes
    validate_certs: no
    client_cert: "{{ ssl_dir }}/admin.pem"
    client_key: "{{ ssl_dir }}/admin.key"
  register: kubelet
  failed_when: "'ok' not in kubelet.content"
  vars: 
    ansible_connection: local
  tags: healthcheck
- name: "restart kube-proxy"
  systemd:
    name: kube-proxy
    state: restarted
    daemon_reload: yes
    enabled: yes
  tags: restart_proxy
- name: "waiting kube-proxy start success"
  wait_for:
    host: "{{ ansible_default_ipv4.address }}"
    port: 10256
    delay: 5
    sleep: 2
  vars: 
    ansible_connection: local
  tags: healthcheck
- name: "kube-proxy check"
  uri:
    url: "http://{{ ansible_default_ipv4.address }}:10256/healthz"
    return_content: yes
    validate_certs: no
    status_code: 200
  register: proxy
  vars:
    ansible_connection: local
  tags: healthcheck
- name: "master draint"
  shell: "kubectl taint nodes {{ item }} node-role.kubernetes.io/master=:NoSchedule"
  delegate_to: "{{ groups['master'][0] }}"
  run_once: true
  with_items:
    - "{{ groups['master'] }}"
  tags: create_label
- name: "master label"
  shell: "kubectl label nodes {{ item }} node-role.kubernetes.io/master="
  delegate_to: "{{ groups['master'][0] }}"
  run_once: true
  with_items:
    - "{{ groups['master'] }}"
  tags: create_label
- name: "wget calico file"
  get_url:
    url: "https://docs.projectcalico.org/manifests/calico.yaml"
    dest: /tmp/
  delegate_to: "{{ groups['master'][0] }}"
  run_once: true
  tags: cni
  when: yum_config_internet
- name: "copy calico file"
  copy:
    src: "calico.yaml"
    dest: /tmp/
  delegate_to: "{{ groups['master'][0] }}"
  run_once: true
  tags: cni
  when: not yum_config_internet
- name: "update calico-etcd install file"
  replace:
    path: "/tmp/calico.yaml"
    regexp: '{{ item.name }}'
    replace: '{{ item.line }}'
  with_items:
    - {name: '# - name: CALICO_IPV4POOL_CIDR', line: '- name: CALICO_IPV4POOL_CIDR'}
    - {name: '#   value: "192.168.0.0/16"', line: '  value: "{{ pod_ip_range }}"'}
    - {name: 'value: "Always"', line: 'value: "{{ calico_ipv4pool_ipip }}"'}
  delegate_to: "{{ groups['master'][0] }}"
  run_once: true
  tags: cni
- name: "install calico"
  shell: "kubectl apply -f /tmp/calico.yaml"
  delegate_to: "{{ groups['master'][0] }}"
  run_once: true
  tags: cni